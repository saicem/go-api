// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ping": {
            "get": {
                "description": "连接测试",
                "summary": "ping",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Response"
                        }
                    }
                }
            }
        },
        "/user/log/query/active": {
            "get": {
                "description": "查询 start_time 到 end_time 范围 total_day_span 内有 active_day_span 天活跃的每日数据\n计算方式为 计算 前 total_day_span 天内有 active_day_span 天有活跃记录 视为活跃",
                "summary": "获取活跃（留存）用户数量",
                "parameters": [
                    {
                        "type": "string",
                        "description": "对象名称",
                        "name": "object_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "事件名称",
                        "name": "event_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "查询开始时间 YYYY-MM-DD",
                        "name": "start_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "查询结束时间 YYYY-MM-DD",
                        "name": "end_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "查询天数范围",
                        "name": "total_day_span",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "活跃天数（需小于查询天数）",
                        "name": "active_day_span",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Response"
                        }
                    }
                }
            }
        },
        "/user/log/retrieve": {
            "get": {
                "summary": "获取用户日志",
                "parameters": [
                    {
                        "type": "string",
                        "description": "对象名称",
                        "name": "object_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "事件名称",
                        "name": "event_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "查询开始时间 YYYY-MM-DD",
                        "name": "start_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "查询结束时间 YYYY-MM-DD",
                        "name": "end_time",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Response"
                        }
                    }
                }
            }
        },
        "/user/log/upload": {
            "post": {
                "summary": "添加用户日志",
                "parameters": [
                    {
                        "description": "json",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PushJson"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Response": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "models.EventInfo": {
            "type": "object",
            "properties": {
                "act_time": {
                    "type": "string"
                },
                "append": {
                    "type": "string"
                }
            }
        },
        "models.PushJson": {
            "type": "object",
            "properties": {
                "device_id": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "user_objects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserObject"
                    }
                }
            }
        },
        "models.UserEvent": {
            "type": "object",
            "properties": {
                "event_infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.EventInfo"
                    }
                },
                "event_name": {
                    "type": "string"
                }
            }
        },
        "models.UserObject": {
            "type": "object",
            "properties": {
                "object_name": {
                    "type": "string"
                },
                "user_events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserEvent"
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "2.0",
	Host:        "localhost:9101",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "swagger 接口文档",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
